//ble.h

#ifndef BLE_H_
#define BLE_H_

#include <zephyr/types.h>
enum SensorType {
	CHANNEL1,
	CHANNEL2,
	CHANNEL3,
	CHANNEL4,
	CHANNEL5,
	CHANNEL6,
	CHANNEL7,
	CHANNEL8,
	HR,
	SPO2,
	TEMP,
	GLUCOSE
};




#define DEVICE_NAME CONFIG_BT_DEVICE_NAME
#define DEVICE_NAME_LEN (sizeof(DEVICE_NAME) - 1)
//A0A43180-96BE-4222-B41E-98EA76B0120C
#define BT_UUID_VAL \
	BT_UUID_128_ENCODE(0xA0A43180, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)

#define BT_UUID_SENSOR_STREAM_CHANNEL1_VAL \
	BT_UUID_128_ENCODE(0xA0A43181, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)
#define BT_UUID_SENSOR_STREAM_CHANNEL2_VAL \
	BT_UUID_128_ENCODE(0xA0A43182, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)
#define BT_UUID_SENSOR_STREAM_CHANNEL3_VAL \
	BT_UUID_128_ENCODE(0xA0A43183, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)

#define BT_UUID_SENSOR_STREAM_CHANNEL4_VAL \
	BT_UUID_128_ENCODE(0xA0A43184, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)

#define BT_UUID_SENSOR_STREAM_CHANNEL5_VAL \
	BT_UUID_128_ENCODE(0xA0A43185, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)

#define BT_UUID_SENSOR_STREAM_CHANNEL6_VAL \
	BT_UUID_128_ENCODE(0xA0A43186, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)

#define BT_UUID_SENSOR_STREAM_CHANNEL7_VAL \
	BT_UUID_128_ENCODE(0xA0A43187, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)

#define BT_UUID_SENSOR_STREAM_CHANNEL8_VAL \
	BT_UUID_128_ENCODE(0xA0A43188, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)


#define BT_UUID_SENSOR_STREAM_HR_VAL \
	BT_UUID_128_ENCODE(0xA0A43189, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)
#define BT_UUID_SENSOR_STREAM_SPO2_VAL \
	BT_UUID_128_ENCODE(0xA0A43190, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)
#define BT_UUID_SENSOR_STREAM_TEMP_VAL \
	BT_UUID_128_ENCODE(0xA0A43191, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)
#define BT_UUID_SENSOR_STREAM_GLUCOSE_VAL \
	BT_UUID_128_ENCODE(0xA0A43192, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)



#define BT_UUID_SENSOR_SW_VAL \
	BT_UUID_128_ENCODE(0xA0A43193, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)

#define BT_UUID_RESET_VAL \
	BT_UUID_128_ENCODE(0xA0A43194, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)

#define BT_UUID_SENSOR_STREAM_SW_VAL \
	BT_UUID_128_ENCODE(0xA0A43195, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)

#define BT_UUID_SENSOR_DOWNLOAD_DATA_SW_VAL \
	BT_UUID_128_ENCODE(0xA0A43196, 0x96BE, 0x4222, 0xB41E, 0x98EA76B0120C)







#define BT_UUID           						BT_UUID_DECLARE_128(BT_UUID_VAL)
#define BT_UUID_SENSOR_STREAM_CHANNEL1	  		BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_CHANNEL1_VAL)
#define BT_UUID_SENSOR_STREAM_CHANNEL2	 		BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_CHANNEL2_VAL)
#define BT_UUID_SENSOR_STREAM_CHANNEL3	  		BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_CHANNEL3_VAL)
#define BT_UUID_SENSOR_STREAM_CHANNEL4	  		BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_CHANNEL4_VAL)
#define BT_UUID_SENSOR_STREAM_CHANNEL5	  		BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_CHANNEL5_VAL)
#define BT_UUID_SENSOR_STREAM_CHANNEL6	  		BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_CHANNEL6_VAL)
#define BT_UUID_SENSOR_STREAM_CHANNEL7	  		BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_CHANNEL7_VAL)
#define BT_UUID_SENSOR_STREAM_CHANNEL8	  		BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_CHANNEL8_VAL)

#define BT_UUID_SENSOR_STREAM_HR	  			BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_HR_VAL)
#define BT_UUID_SENSOR_STREAM_SPO2	  			BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_SPO2_VAL)
#define BT_UUID_SENSOR_STREAM_TEMP	  			BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_TEMP_VAL)
#define BT_UUID_SENSOR_STREAM_GLUCOSE	  		BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_GLUCOSE_VAL)

#define BT_UUID_SENSOR_SW       				BT_UUID_DECLARE_128(BT_UUID_SENSOR_SW_VAL)
#define BT_UUID_RESET	  						BT_UUID_DECLARE_128(BT_UUID_RESET_VAL)
#define BT_UUID_SENSOR_STREAM_SW				BT_UUID_DECLARE_128(BT_UUID_SENSOR_STREAM_SW_VAL)
#define BT_UUID_SENSOR_DOWNLOAD_DATA_SW			BT_UUID_DECLARE_128(BT_UUID_SENSOR_DOWNLOAD_DATA_SW_VAL)

typedef int (*sensor_switch_cb_t) (uint8_t value);
typedef int (*sensor_data_download_cb_t) (uint8_t value);


struct ble_cb  {
	sensor_switch_cb_t sensor_switch_cb;
	
	sensor_data_download_cb_t sensor_data_download_cb;
};
struct sensor_state{
	bool is_streaming;
	bool is_empty;
	int data_size;
};

int init_ble_service(struct ble_cb *callbacks);
int register_ble_cb(struct ble_cb *callbacks);
int stream_sensor_data(enum SensorType sensor_type, uint32_t *sensor_value, ssize_t size);


#endif /* BLE_H_ */